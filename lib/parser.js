/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2015, Joyent, Inc. All rights reserved.
 *
 *
 * fwadm: firewall rule parser
 */


/* parser generated by jison 0.4.2 */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"FROM":4,"target_list":5,"TO":6,"action":7,"protocol":8,"EOF":9,"any":10,"all":11,"(":12,"target_or_list":13,")":14,"target":15,"OR":16,"ip":17,"subnet":18,"tag":19,"vm":20,"ALL":21,"VMS":22,"ANY":23,"IP":24,"IPADDR":25,"SUBNET":26,"CIDRSUFFIX":27,"VM":28,"uuid":29,"WORD":30,"TAG":31,"tag_string":32,"=":33,"STRING":34,"BLOCK":35,"ALLOW":36,"TCP":37,"port_list":38,"ports":39,"UDP":40,"ICMP":41,"type_list":42,"port_and_list":43,"port":44,"port_all":45,"AND":46,"PORT":47,"portnumber":48,"PORTS":49,"portnumbers":50,"portrange":51,"-":52,",":53,"type_and_list":54,"type":55,"TYPE":56,"icmptype":57,"CODE":58,"icmpcode":59,"$accept":0,"$end":1},
terminals_: {2:"error",4:"FROM",6:"TO",9:"EOF",12:"(",14:")",16:"OR",21:"ALL",22:"VMS",23:"ANY",24:"IP",25:"IPADDR",26:"SUBNET",27:"CIDRSUFFIX",28:"VM",30:"WORD",31:"TAG",33:"=",34:"STRING",35:"BLOCK",36:"ALLOW",37:"TCP",40:"UDP",41:"ICMP",46:"AND",47:"PORT",49:"PORTS",52:"-",53:",",56:"TYPE",58:"CODE"},
productions_: [0,[3,7],[5,1],[5,1],[5,3],[5,1],[13,1],[13,3],[15,1],[15,1],[15,1],[15,1],[11,2],[11,4],[10,1],[10,3],[17,2],[18,3],[20,2],[29,1],[19,2],[19,4],[32,1],[32,1],[7,1],[7,1],[8,2],[8,2],[8,2],[8,2],[8,2],[38,3],[38,1],[38,3],[38,1],[43,1],[43,3],[44,2],[39,2],[45,2],[48,1],[51,1],[51,3],[50,1],[50,3],[42,3],[42,1],[54,1],[54,3],[55,4],[55,2],[57,1],[59,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return { 'from': $$[$0-5], 'to': $$[$0-3], 'action': $$[$0-2], 'protocol': $$[$0-1] }; 
break;
case 4:this.$ = $$[$0-1];
break;
case 7: this.$ = $$[$0-2].concat($$[$0]); 
break;
case 12: this.$ = [ ['wildcard', 'vmall'] ]; 
break;
case 13: this.$ = [ ['wildcard', 'vmall'] ]; 
break;
case 14: this.$ = [ ['wildcard', 'any'] ]; 
break;
case 15: this.$ = [ ['wildcard', 'any'] ]; 
break;
case 16: yy.validateIPv4address($$[$0]);
          this.$ = [ ['ip', $$[$0]] ]; 
break;
case 17: yy.validateIPv4subnet($$[$0-1] + $$[$0]);
            this.$ = [ ['subnet', $$[$0-1] + $$[$0]] ]; 
break;
case 18: this.$ = [ ['vm', $$[$0]] ]; 
break;
case 19: yy.validateUUID($$[$0]);
          this.$ = $$[$0]; 
break;
case 20: this.$ = [ ['tag', $$[$0]] ]; 
break;
case 21: this.$ = [ ['tag', [ $$[$0-2], $$[$0] ] ] ]; 
break;
case 22: this.$ = yytext; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0].toLowerCase() 
break;
case 25: this.$ = $$[$0].toLowerCase() 
break;
case 26: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
break;
case 27: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
break;
case 28: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
break;
case 29: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
break;
case 30: this.$ = { 'name': $$[$0-1].toLowerCase(), 'targets': $$[$0] } 
break;
case 31: this.$ = $$[$0-1]; 
break;
case 36: this.$ = $$[$0-2].concat(Number($$[$0])); 
break;
case 37: this.$ = [ $$[$0] ]; 
break;
case 38: yy.validateOKVersion(2, 'port ranges');
          this.$ = $$[$0]; 
break;
case 39: this.$ = [ $$[$0].toLowerCase() ]; 
break;
case 40: yy.validatePortNumber($$[$0]);
          this.$ = Number($$[$0]); 
break;
case 41: this.$ = [ yy.createMaybePortRange($$[$0]) ]; 
break;
case 42: yy.validatePortNumber($$[$0-2]);
          yy.validatePortNumber($$[$0]);
          yy.validateRangeOrder($$[$0-2], $$[$0]);
          this.$ = [{ 'start': Number($$[$0-2]), 'end': Number($$[$0]) }]; 
break;
case 44: this.$ = $$[$0-2].concat($$[$0]); 
break;
case 45: this.$ = $$[$0-1]; 
break;
case 48: this.$ = $$[$0-2].concat($$[$0]); 
break;
case 49: this.$ = [ $$[$0-2] + ':' + $$[$0] ]; 
break;
case 50: this.$ = [ $$[$0] ]; 
break;
case 51: yy.validateICMPtype($$[$0]);
          this.$ = Number($$[$0]); 
break;
case 52: yy.validateICMPcode($$[$0]);
          this.$ = Number($$[$0]); 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:[1,9],23:[1,8],24:[1,14],26:[1,15],28:[1,17],31:[1,16]},{6:[1,18]},{6:[2,2],35:[2,2],36:[2,2]},{6:[2,3],35:[2,3],36:[2,3]},{13:19,15:22,17:10,18:11,19:12,20:13,21:[1,21],23:[1,20],24:[1,14],26:[1,15],28:[1,17],31:[1,16]},{6:[2,5],35:[2,5],36:[2,5]},{6:[2,14],35:[2,14],36:[2,14]},{22:[1,23]},{6:[2,8],14:[2,8],16:[2,8],35:[2,8],36:[2,8]},{6:[2,9],14:[2,9],16:[2,9],35:[2,9],36:[2,9]},{6:[2,10],14:[2,10],16:[2,10],35:[2,10],36:[2,10]},{6:[2,11],14:[2,11],16:[2,11],35:[2,11],36:[2,11]},{25:[1,24]},{25:[1,25]},{30:[1,28],32:26,34:[1,27]},{29:29,30:[1,30]},{5:31,10:4,11:5,12:[1,6],15:7,17:10,18:11,19:12,20:13,21:[1,9],23:[1,8],24:[1,14],26:[1,15],28:[1,17],31:[1,16]},{14:[1,32],16:[1,33]},{14:[1,34]},{22:[1,35]},{14:[2,6],16:[2,6]},{6:[2,12],35:[2,12],36:[2,12]},{6:[2,16],14:[2,16],16:[2,16],35:[2,16],36:[2,16]},{27:[1,36]},{6:[2,20],14:[2,20],16:[2,20],33:[1,37],35:[2,20],36:[2,20]},{6:[2,22],14:[2,22],16:[2,22],33:[2,22],35:[2,22],36:[2,22]},{6:[2,23],14:[2,23],16:[2,23],33:[2,23],35:[2,23],36:[2,23]},{6:[2,18],14:[2,18],16:[2,18],35:[2,18],36:[2,18]},{6:[2,19],14:[2,19],16:[2,19],35:[2,19],36:[2,19]},{7:38,35:[1,39],36:[1,40]},{6:[2,4],35:[2,4],36:[2,4]},{15:41,17:10,18:11,19:12,20:13,24:[1,14],26:[1,15],28:[1,17],31:[1,16]},{6:[2,15],35:[2,15],36:[2,15]},{14:[1,42]},{6:[2,17],14:[2,17],16:[2,17],35:[2,17],36:[2,17]},{30:[1,28],32:43,34:[1,27]},{8:44,37:[1,45],40:[1,46],41:[1,47]},{37:[2,24],40:[2,24],41:[2,24]},{37:[2,25],40:[2,25],41:[2,25]},{14:[2,7],16:[2,7]},{6:[2,13],35:[2,13],36:[2,13]},{6:[2,21],14:[2,21],16:[2,21],35:[2,21],36:[2,21]},{9:[1,48]},{12:[1,51],38:49,39:50,44:52,45:53,47:[1,55],49:[1,54]},{12:[1,51],38:56,39:57,44:52,45:53,47:[1,55],49:[1,54]},{12:[1,59],42:58,55:60,56:[1,61]},{1:[2,1]},{9:[2,26]},{9:[2,27]},{43:62,44:64,45:63,47:[1,55]},{9:[2,32]},{9:[2,34]},{30:[1,67],50:65,51:66},{21:[1,69],30:[1,70],48:68},{9:[2,28]},{9:[2,29]},{9:[2,30]},{54:71,55:72,56:[1,61]},{9:[2,46]},{30:[1,74],57:73},{14:[1,75],46:[1,76]},{14:[1,77]},{14:[2,35],46:[2,35]},{9:[2,38],53:[1,78]},{9:[2,43],53:[2,43]},{9:[2,41],52:[1,79],53:[2,41]},{9:[2,37],14:[2,37],46:[2,37]},{9:[2,39],14:[2,39]},{9:[2,40],14:[2,40],46:[2,40]},{14:[1,80],46:[1,81]},{14:[2,47],46:[2,47]},{9:[2,50],14:[2,50],46:[2,50],58:[1,82]},{9:[2,51],14:[2,51],46:[2,51],58:[2,51]},{9:[2,31]},{44:83,47:[1,84]},{9:[2,33]},{30:[1,67],51:85},{30:[1,86]},{9:[2,45]},{55:87,56:[1,61]},{30:[1,89],59:88},{14:[2,36],46:[2,36]},{30:[1,70],48:68},{9:[2,44],53:[2,44]},{9:[2,42],53:[2,42]},{14:[2,48],46:[2,48]},{9:[2,49],14:[2,49],46:[2,49]},{9:[2,52],14:[2,52],46:[2,52]}],
defaultActions: {48:[2,1],49:[2,26],50:[2,27],52:[2,32],53:[2,34],56:[2,28],57:[2,29],58:[2,30],60:[2,46],75:[2,31],77:[2,33],80:[2,45]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* generated by jison-lex 0.1.0 */
var lexer = (function(){
var lexer = {
EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 9;
break;
case 2:return 4;
break;
case 3:return 4;
break;
case 4:return 6;
break;
case 5:return 6;
break;
case 6:return 24;
break;
case 7:return 24;
break;
case 8:return 26;
break;
case 9:return 26;
break;
case 10:return 23;
break;
case 11:return 23;
break;
case 12:return 21;
break;
case 13:return 21;
break;
case 14:return 31;
break;
case 15:return 31;
break;
case 16:return 28;
break;
case 17:return 28;
break;
case 18:return 22;
break;
case 19:return 22;
break;
case 20:return 52;
break;
case 21:return 53;
break;
case 22:return 33;
break;
case 23:return 12;
break;
case 24:return 14;
break;
case 25:return 16;
break;
case 26:return 16;
break;
case 27:return 46;
break;
case 28:return 46;
break;
case 29:return 35;
break;
case 30:return 35;
break;
case 31:return 36;
break;
case 32:return 36;
break;
case 33:return 47;
break;
case 34:return 47;
break;
case 35:return 49;
break;
case 36:return 49;
break;
case 37:return 37;
break;
case 38:return 37;
break;
case 39:return 40;
break;
case 40:return 40;
break;
case 41:return 41;
break;
case 42:return 41;
break;
case 43:return 56;
break;
case 44:return 56;
break;
case 45:return 58;
break;
case 46:return 58;
break;
case 47:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 34;
break;
case 48:return 25;
break;
case 49:return 27
break;
case 50:return 30
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:FROM\b)/,/^(?:from\b)/,/^(?:TO\b)/,/^(?:to\b)/,/^(?:IP\b)/,/^(?:ip\b)/,/^(?:SUBNET\b)/,/^(?:subnet\b)/,/^(?:ANY\b)/,/^(?:any\b)/,/^(?:ALL\b)/,/^(?:all\b)/,/^(?:TAG\b)/,/^(?:tag\b)/,/^(?:VM\b)/,/^(?:vm\b)/,/^(?:VMS\b)/,/^(?:vms\b)/,/^(?:-)/,/^(?:,)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:OR\b)/,/^(?:or\b)/,/^(?:AND\b)/,/^(?:and\b)/,/^(?:BLOCK\b)/,/^(?:block\b)/,/^(?:ALLOW\b)/,/^(?:allow\b)/,/^(?:PORT\b)/,/^(?:port\b)/,/^(?:PORTS\b)/,/^(?:ports\b)/,/^(?:TCP\b)/,/^(?:tcp\b)/,/^(?:UDP\b)/,/^(?:udp\b)/,/^(?:ICMP\b)/,/^(?:icmp\b)/,/^(?:TYPE\b)/,/^(?:type\b)/,/^(?:CODE\b)/,/^(?:code\b)/,/^(?:"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*")/,/^(?:(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3})\.(([0-9]){1,3}))/,/^(?:\/([0-9])([0-9]))/,/^(?:[-a-zA-Z0-9_]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
